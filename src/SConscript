import os

arch = ARGUMENTS.get('arch', 'i686')

cross = ARGUMENTS.get('CROSS_TOOLS', os.environ.get('CROSS_TOOLS', ''))
if cross == '':
  cross_bin = ''
  cross_lib = ''
else:
  cross_bin = os.path.join(cross, 'bin')
  cross_lib = os.path.join(cross, arch + '-elf', 'lib')

env = Environment()   # Initialize the environment

# Create a builder for mkisofs
mkisofs_builder = Builder(action=Action('$MKISOFSCOM', '$MKISOFSCOMSTR'),
                          source_factory=env.fs.Dir)
env.Append(BUILDERS={'MkIsoFs': mkisofs_builder})
env['MKISOFSCOM'] = 'mkisofs $MKISOFSFLAGS -o $TARGET $SOURCE'
env['MKISOFSCOMSTR'] = '$MKISOFSCOM'

# setup the C compiler
env.Replace(CC = os.path.join(cross_bin, arch + '-elf-gcc'))
env.Append(CFLAGS = ['-gstabs+', '-ffreestanding'])
env.Append(CDEFINES = ['DEBUG'])

# setup the C++ compiler
env.Replace(CXX = os.path.join(cross_bin, arch + '-elf-g++'))
env.Append(CXXFLAGS = ['-Wall', '-Wextra', '-Werror', '-fno-exceptions',
  '-ffreestanding', '-std=c++11', '-fno-rtti', '-fno-stack-protector'])
env.Append(CPPDEFINES = ['DEBUG'])

# setup the Assembler
env.Replace(AS = os.path.join(cross_bin, arch + '-elf-as'))
env.Append(ASFLAGS = '-gstabs')

# setup the Linker
env.Replace(LINK = os.path.join(cross_bin, arch + '-elf-ld'))
env.Append(LIBS = 'c')
if cross_lib != '':
  env.Append(LIBPATH = cross_lib)
env.Replace(LINKFLAGS = '-T src/arch/' + arch + '/linker.ld')

env.Append(CPPPATH = ['.', 'arch/' + arch])

kernel = env.Program(target = 'kernel.elf', source = [
  'arch/' + arch + '/loader.s',
  'sys/icxxabi.cc',
  'video/text_screen.cc',
  'sys/kernel.cc',
  'mm/allocator.cc',
  'mm/ks_allocator.cc',
  'mm/kheap.cc',
  'arch/' + arch + '/mm/gdt.cc',
  'arch/' + arch + '/mm/page_allocator.cc',
  'arch/' + arch + '/mm/paging.cc',
  'arch/' + arch + '/mm/page_fault_handler.cc',
  'arch/' + arch + '/int/interrupt.s',
  'arch/' + arch + '/int/idt.cc',
  'arch/' + arch + '/int/isr.cc',
  'kernel/main_entry.cc'])
  
# Create a bootable ISO image
iso = env.MkIsoFs(
    target='bootable.iso',
    source=[Dir('#iso'),
            File('#iso/boot/grub/menu.lst'),
            File('#iso/boot/grub/stage2_eltorito'),
            env.Command('#iso/boot/kernel.elf', kernel, Copy('$TARGET', '$SOURCE')),
    ],
    MKISOFSFLAGS=['-graft-points',
                  '-R',
                  '-b', 'boot/grub/stage2_eltorito',
                  '-no-emul-boot',
                  '-boot-load-size', '4',
                  '-boot-info-table'
    ],
)
env.Alias('iso', iso)

# Documentation
env.Alias('documentation', env.Command('html', '#docs/Doxyfile', 'doxygen $SOURCE'))

Default(kernel, iso)